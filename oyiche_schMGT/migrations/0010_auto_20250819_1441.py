# Generated by Django 5.2.5 on 2025-08-19 14:41

from django.db import migrations

def populate_foreign_keys_with_uuid(apps, schema_editor):

    SchoolInformation = apps.get_model("oyiche_schMGT", "SchoolInformation")
    for obj in SchoolInformation.objects.all():

        obj.school_category_uuid = obj.school_category.sch_category_id
        obj.school_type_uuid = obj.school_type.sch_type_id

        obj.save(update_fields=["school_category_uuid", "school_type_uuid"])

    SchoolAdminInformation = apps.get_model("oyiche_schMGT", "SchoolAdminInformation")
    for obj in SchoolAdminInformation.objects.all():

        obj.gender_uuid = obj.gender.gender_id

        obj.save(update_fields=["gender_uuid"])

    StudentInformation = apps.get_model("oyiche_schMGT", "StudentInformation")
    for obj in StudentInformation.objects.all():

        obj.gender_uuid = obj.gender.gender_id

        obj.save(update_fields=["gender_uuid"])

    StudentEnrollment = apps.get_model("oyiche_schMGT", "StudentEnrollment")
    for obj in StudentEnrollment.objects.all():

        obj.student_class_uuid = obj.student_class.class_id
        obj.promoted_class_uuid = obj.promoted_class.class_id if obj.promoted_class else None
        obj.academic_session_uuid = obj.academic_session.academic_session_id
        obj.academic_term_uuid = obj.academic_term.academic_term_id
        obj.academic_status_uuid = obj.academic_status.academic_status_id

        obj.save(update_fields=["student_class_uuid", "promoted_class_uuid", "academic_session_uuid", "academic_term_uuid", "academic_status_uuid"])

    SchoolClassSubjects = apps.get_model("oyiche_schMGT", "SchoolClassSubjects")
    for obj in SchoolClassSubjects.objects.all():

        obj.school_class_uuid = obj.school_class.class_id
        obj.school_subject_uuid = obj.school_subject.sch_subject_id

        obj.save(update_fields=["school_class_uuid", "school_subject_uuid"])

    StudentScores = apps.get_model("oyiche_schMGT", "StudentScores")
    for obj in StudentScores.objects.all():

        obj.subject_uuid = obj.subject.sch_class_subject_id
        obj.term_uuid = obj.term.academic_term_id
        obj.session_uuid = obj.session.academic_session_id
        obj.grade_uuid = obj.grade.sch_grade_id

        obj.save(update_fields=["subject_uuid", "term_uuid", "session_uuid", "grade_uuid"])

    StudentPerformance = apps.get_model("oyiche_schMGT", "StudentPerformance")
    for obj in StudentPerformance.objects.all():

        obj.school_remark_uuid = obj.school_remark.sch_remark_id if obj.school_remark else None

        obj.save(update_fields=["school_remark_uuid"])

class Migration(migrations.Migration):
    atomic = True

    dependencies = [
        ('oyiche_schMGT', '0009_schooladmininformation_gender_uuid_and_more'),
    ]

    operations = [
        migrations.RunPython(populate_foreign_keys_with_uuid),
    ]
